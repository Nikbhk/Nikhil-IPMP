/* Check for Balanced Brackets in an expression (well-formedness) using Stack
Difficulty Level : Easy
Last Updated : 06 Jun, 2021
 
Given an expression string exp, write a program to examine whether the pairs and the orders of “{“, “}”, “(“, “)”, “[“, “]” are correct in exp.
eg: 
Input: exp = “[()]{}{[()()]()}” 
Output: Balanced

Input: exp = “[(])” 
Output: Not Balanced 
*/

#include<bits/stdc++.h>
using namespace std;

bool ispar(string x)
    {stack<char> stack;        //creating stack datatype 
    for(int i=0;i<x.size();i++)
     { if(x[i]=='{' || x[i]=='[' || x[i]=='(')   
         stack.push(x[i]);               //pushing elements in stack

        else {
               if (stack.empty())                          //Function to check if stack is empty
                     return false;

               else if (x[i]== '}' && stack.top() != '{')  //check if } in the string and { in stack are present
                 return false;

               else if (x[i]== ']' && stack.top() != '[')  //check if [ in the string and ] in stack are present
                 return false;

               else if (x[i]== ')' && stack.top() != '(')  //check if ) in the string and ( in stack are present
                 return false;

               else
               stack.pop();    //pop elemnets out of stack
           }

     }
     if(stack.empty())
        return true;

    else return false;
    }

int main()
{string a;
cout<<"Enter only brackets = ";
       cin>>a;
       if(ispar(a))
        cout<<"\nbalanced\n"<<endl;
       else
        cout<<"\nnot balanced\n"<<endl;
return 0;
}
