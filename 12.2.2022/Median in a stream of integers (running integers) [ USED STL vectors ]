//DONE ON MY OWN!! (used STL)
//TRIED UPTO 20 CASES, WORKED WELL 

/* QUESTION : Given that integers are read from a data stream. Find median of elements read so for in an efficient way. For simplicity assume, 
there are no duplicates. For example, let us consider the stream 5, 15, 1, 3 â€¦ 


After reading 1st element of stream - 5 -> median - 5
After reading 2nd element of stream - 5, 15 -> median - 10
After reading 3rd element of stream - 5, 15, 1 -> median - 5
After reading 4th element of stream - 5, 15, 1, 3 -> median - 4, so on...

*/

#include<iostream>
#include<vector>
#include<iomanip>
#include<algorithm>

using namespace std;
static int n;

int main()
{vector<int> a;
 int  num, opt;
 a.push_back(5);
 n=1;

/*a.push_back(3);
a.push_back(0);
a.push_back(9);
a.push_back(6);
*/

while(1)
{sort(a.begin(),a.end());

cout<<"Elements (in sorted order) entered are : ";
for(int i:a)
    cout<<i<<" ";

if(n%2==0)
 {int sum = a.at((n/2) - 1) + a.at(n/2);
  cout<<"\nMedian = "<<sum/2;
 }
else
 {cout<<"\nMedian = "<<a.at(n/2); }

cout<<"\n\nDo u want to add another element? 0 (No) | 1 (Yes) = ";
cin>>opt;

if(opt==1)
 {cout<<"\nEnter an element = ";
  cin>>num;
  cout<<endl;
  a.push_back(num);
  n++;
}
else
    exit(0);
}
return 0;
}
