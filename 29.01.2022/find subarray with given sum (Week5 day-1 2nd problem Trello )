/*  Given an unsorted array of nonnegative integers, find a continuous subarray which adds to a given number. 
Examples : 

Input: arr[] = {1, 4, 20, 3, 10, 5}, sum = 33
Output: Sum found between indexes 2 and 4
Sum of elements between indices
2 and 4 is 20 + 3 + 10 = 33

*/

#include<iostream>

using namespace std;

//O(n^2) time

int main()
{int flag=0,sum1,i,j,n,a[10];
cout<<"Enter no. of elements in array = ";
cin>>n;
cout<<"Enter elements to find subarray equal to the sum\n";

for(i=0;i<n;i++)
cin>>a[i];

cout<<"Enter the sum to find the subarray = ";
cin>>sum1;

for(i=0;i<n;i++)
 { int sum=0;
   for(j=i;j<n;j++)
    {sum+=a[j];
     if(sum==sum1)
      {cout<<"Sum found at subarray between "<<i<<" and "<<j<<endl;
       cout<<"Sum of elements between indices\n";
       for(int k=i;k<=j;k++)
       cout<<a[k]<<"+";
       cout<<"\b = "<<sum<<endl;
       flag++;
       exit(0);
      }
   }
 }
if(flag==0)
    cout<<"No subarray found\n";
return 0;
}


2nd Approach:

/* An efficient program to print
subarray with sum as given sum */
#include <iostream>
using namespace std;

/* Returns true if the there is a subarray of
arr[] with a sum equal to 'sum' otherwise
returns false. Also, prints the result */
int subArraySum(int arr[], int n, int sum)
{
	/* Initialize curr_sum as value of
	first element and starting point as 0 */
	int curr_sum = arr[0], start = 0, i;

	/* Add elements one by one to curr_sum and
	if the curr_sum exceeds the sum,
	then remove starting element */
	for (i = 1; i <= n; i++) {
		// If curr_sum exceeds the sum,
		// then remove the starting elements
		while (curr_sum > sum && start < i - 1) {
			curr_sum = curr_sum - arr[start];
			start++;
		}

		// If curr_sum becomes equal to sum,
		// then return true
		if (curr_sum == sum) {
			cout << "Sum found between indexes "
				<< start << " and " << i - 1;
			return 1;
		}

		// Add this element to curr_sum
		if (i < n)
			curr_sum = curr_sum + arr[i];
	}

	// If we reach here, then no subarray
	cout << "No subarray found";
	return 0;
}

// Driver Code
int main()
{
	int arr[] = { 15, 2, 4, 8, 9, 5, 10, 23 };
	int n = sizeof(arr) / sizeof(arr[0]);
	int sum = 23;
	subArraySum(arr, n, sum);
	return 0;
}
