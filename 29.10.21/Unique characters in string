/* Given a string, determine if the string has all unique characters. */

/*My Orginal Soln:1 O(n^2) Brute - Force*/

#include <iostream>
#include<string>
using namespace std;

bool x(string s)
{int i,j,f=0;
for(i=0;i<s.length()-1;i++)
 { for(j=i+1;j<s.length();j++)
  {if (s[i]==s[j])
   {f=1;
    return false;
   }
  }
 }
 if(f==0)
 return true;
}

int main()
{string s;
cout<<"Please enter a string to check if all it's characters are unique or not\n";
getline(cin,s);
if(!x(s))    //checks if condition is false
    cout<<"Not unique string\n";
else
    cout<<"Unique string\n";
return 0;
}


/* O(nlogn) Approach 2*/

#include <iostream>
#include <string>
#include <algorithm>
//#include <bits/stdc++.h>
using namespace std;

bool x(string str)
{	// Using sorting
	sort(str.begin(), str.end());

	for (int i = 0; i < str.length()-1; i++)
    {
		/*if at any time, 2 adjacent
		// elements become equal,
		 return false*/
     
		if (str[i] == str[i + 1]) 
    {	return false;
		}
	}
	return true;
}


int main()   // driver code
{
	string str;
	cout<<"Please enter a string to check if all it's characters are unique or not\n";
  getline(cin,str);  //getting a string from user

if (x(str))  //checks if condition is true or not by calling the function
  {		
  cout << "The String " << str<< " has all unique characters\n";
	}
	else {

		cout << "The String " << str
			<< " has duplicate characters\n";
	}
	return 0;
}

//APPROACH-3 O(nlog(N))
// C++ program to illustrate String with unique
// characters using set data structure

#include <bits/stdc++.h>
using namespace std;

bool uniqueCharacters(string str)
{
	set<char> char_set;

	// Inserting character of string into set
	for(char c : str)
	{
		char_set.insert(c);
	}

	// If length of set is equal to len of string
	// then it will have unique characters
	if (char_set.size() == str.size())
	{
		return true;
	}
	else
	{
		return false;
	}
}

// Driver code
int main()
{
	string str = "GeeksforGeeks";

	if (uniqueCharacters(str))  //if the condition returned by function is true then it will execute the instructions
	{
		cout << "The String " << str
			<< " has all unique characters\n";
	}
	else
	{
		cout << "The String " << str
			<< " has duplicate characters\n";
	}
	return 0;
}


//Approach 4
#include <cstring>
#include <iostream>
using namespace std;

const int max_char = 256; //global variable

bool uniqueCharacters(string str)
{
/*If length is greater than 265
(it's supposed to be 0-255 which includes all lowercase, uppercase , and all special characters
 even numbers are treated as character which has it's own ASCII value
  but we will be calculating the length of string),
some characters must have been repeated*/
	if (str.length() >max_char)
		return false;

	bool chars[max_char] = { 0 }; //All 256 characters of ASCII are given false value i.e 0 in the 'chars' array
	for (int i = 0; i < str.length(); i++)
    {
		if (chars[int(str[i])] == true)  /* */
			return false;

		chars[int(str[i])] = true;  /*every ith letter in 'str' is given true value in the 'chars' array
	which implies we have travelled through that ASCII character already once */
	}
	return true;
}

// driver code
int main()
{
	string str;
	cout<<"Enter any string ";
	getline(cin,str);

	if (uniqueCharacters(str)) {
		cout << "The String " << str
			<< " has all unique characters\n";
	}
	else {

		cout << "The String " << str
			<< " has duplicate characters\n";
	}
	return 0;
}


//Approach 5

// C++ program to illustrate string
// with unique characters using
// brute force technique
#include <bits/stdc++.h>
using namespace std;

bool uniqueCharacters(string str)
{

	// Assuming string can have characters
	// a-z, this has 32 bits set to 0
	int checker = 0;

	for (int i = 0; i < str.length(); i++) {

		int bitAtIndex = str[i] - 'a';

		// if that bit is already set in
		// checker, return false
		if ((checker & (1 << bitAtIndex)) > 0) {
			return false;
		}

		// otherwise update and continue by
		// setting that bit in the checker
		checker = checker | (1 << bitAtIndex);
	}

	// no duplicates encountered, return true
	return true;
}

// driver code
int main()
{

	string str = "geeksforgeeks";

	if (uniqueCharacters(str)) {
		cout << "The String " << str
			<< " has all unique characters\n";
	}
	else {
		cout << "The String " << str
			<< " has duplicate characters\n";
	}
	return 0;
}

